Tree:
-----
A tree is an undirected graph with no cycles.
Graph with n nodes and n-1 edges

Rooted Tree:
------------
Designated root node where every edge either points away from or towards the root node.
When edges point away from root, graph is called out-tree.
When point towards => in-tree.

DAGs(Directed Acyclic Graph):
----------------------------
Directed graphs with no cycles.

Bipartite Graph:
--------------
Vertices can be split into 2 independent groups U,V such that every edge connects between U and V.

Complete Graph:
-------------
There is a unique edge between every pair of nodes.

Strongly connected components:
----------------------------
Every vertex in a given cycle can reach every other vertex in same cycle.

Bridge/ cut edge:
----------------
Any edge in graph, whose removal increases number of connected components.

Articulation point/ Cut vertex:
------------------------------
Any node in graph, whose removal increases number of connected components.

Minimum spanning tree:
--------------------
Subset of edges of a connected, edge-weighted graph that connects all Vertices together without any cycles and 
with Minimum possible total edge weight.

Common Problems:
---------------
1. Shortest path: BFS(unweighted graph), Dijkstra's, Bellman-Ford, Floyd-Warshall, A*...
2. Does there exist a path between node A and B:
    Union find data structure, or DFS.
3. Negative cycles: Bellman-Ford, Floyd-Warshall
4. Strongly connected components: Tarjan's and Kosaraju's.
5. Travelling salesman: Held-karp, branch and bound, approximation algorithms.
6. Minimum spanning tree: Kruskal, Prim, Borukva
7. Max flow(for e.g. maximum flow of water through a pipe): Ford-Fulkerson, Edmonds-Karp, Dinic's

Center of Undirected Tree:
--------------
Center is always the middle vertex or middle two Vertices in every longest path along the tree.

Isomorphic trees:
----------------
structurally same trees.
There should exist a function f which can map all the nodes/edges in G1 to G2 and vice-versa.
serialize trees into a unique encoding, then if any other tree has same encoding, they are Isomorphic.
If trees are undirected, then choose Center of the tree for both the trees, then serialize them.
While combining child labels, they should be sorted => uniqueness
algo:
1. Leaf nodes are assigned knuth tuples '()'.
2. Every time you move up a layer the labels of previous subtrees get sorted lexicographically and wrapped in brackets.
3. you can't process a node until u have processed all it's children.

Lowest Common Ancestor:
------------------------
In a rooted tree, LCA of two nodes a and b is deepest node c that has both a and b as descnedants. ( A node can be descnedant of itself)
LCA(a,a) = a
Eulerian Tour + Range Minimum Query method.
Eulerian Tour: Visit a node, visit its 1st subtree and again visit the node, then visit 2nd subtree and again visit the node and so on.
Make a depth array and a node array.
At every visit of a node, push_back it to node array and push_back its depth in depth array.
Depth of root node = 0, next level is 1, ...
To find LCA(a,b) find their index in node array, let it be a1 and b1. Then search for lowest value of depth in [a1,b1] of depth array, that index in node array will be LCA of a and b
If there are multiple indexes in node array, it is easiest to select the last encountered (largest) index.
For that, create a last array.
Create a sparse table using depth array.
When a Query node1, node2 is asked
It will see last[node1] and last[node2], and take left = min of them and right = max of them.

Now, it will return index i of element in depth array which is minimum in [left, right] interval of depth array.
Lowest common Ancestor of node1 and node2 is nodes[i]


Top sort:
--------
Only for DAGs
An ordering of nodes in a directed Acyclic graph where for each directed edge from node A to node B, node A appears before B in ordering. Time complexity O(V+E). Top sort isn't unique. Not every graph has a topological ordering.
Kahn's Algorithm:
Identify a node with 0 indegree, add it to topsort array and remove it from graph

Dijkstra's single source Shortest path algo:
-------------------------------------------
Only applicable for non negative edge weights.