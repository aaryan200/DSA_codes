int dx = {0, 1, 0, -1};
int dy = {1, 0, -1, 0};

void move(int flood[n][m], int wall[n][m], int& x, int& y, int& orient) {
    // Find the cell which has the minimum flood value and also accessible from the current cell
    int newX = x, newY = y, minVal = INT_MAX;
    for (int k=0;k<4;k++) {
        int i = x + dx[k], j = y + dy[k];
        if ( i >= 0 and i < n and j >=0 and j < m and isAccessible(x, y, i, j, walls)) {
            if (flood[i][j] < minVal) {
                minVal = flood[i][j];
                newX = i;
                newY = j;
            }
        }
    }
    updateOrientation(x, y, newX, newY, orient);
    x = newX;
    y = newY;
}

main() {
    flood[n][m];
    wall[n][m] = 15; // No cell has any wall
    // Assuming no walls, fill flood
    fill(flood, wall);
    // traverse
    int x = 0, y = 0, orient = 0;
    while (true) {
        // detect wall
        detected = detectWall();
        wall[x][y] = detected;
        move(flood, wall, x, y, orient);
    }
}